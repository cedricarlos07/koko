import { db } from "./server/db";
import { eq } from "drizzle-orm";
import { templateMessages, automationRules } from "./shared/schema";

/**
 * Script pour cr√©er des templates de messages et des automatisations pr√©configur√©es
 */
async function createAutomations() {
  console.log("Cr√©ation des templates de messages et des automatisations pr√©configur√©es...");

  try {
    // V√©rifier si des templates existent d√©j√†
    const existingTemplates = await db.select().from(templateMessages);
    if (existingTemplates.length > 0) {
      console.log(`${existingTemplates.length} templates de messages existent d√©j√†.`);
    } else {
      // Cr√©er les templates de messages pr√©d√©finis
      await db.insert(templateMessages).values([
        {
          name: "Rappel de cours quotidien",
          type: "course-reminder",
          content: `üìö *Cours du jour : {course}*
üë®‚Äçüè´ Prof : {instructor}
üïí Heure : {time} GMT
üîó [üëâ Lien Zoom ici]({zoom_link})

Bonne journ√©e et soyez ponctuel¬∑les ! üéØ`
        },
        {
          name: "Annonce de devoir",
          type: "announcement",
          content: `üìù *Devoir pour le cours {course}*
Un nouveau devoir a √©t√© assign√© par {instructor}.

üìÖ Date limite : {deadline}
üìã Description : {description}

N'h√©sitez pas √† poser des questions si n√©cessaire.`
        },
        {
          name: "Attribution de badge",
          type: "badge-award",
          content: `üèÜ *F√©licitations, {name}!*
Vous avez obtenu un nouveau badge: **{badge_name}**

"{badge_description}"

Continuez votre excellent travail! üí™`
        },
        {
          name: "Message de bienvenue",
          type: "welcome",
          content: `üëã *Bienvenue dans le cours {course}!*

Nous sommes ravis de vous accueillir dans notre communaut√© d'apprentissage.
Voici quelques informations importantes :

üìö Niveau : {level}
üë®‚Äçüè´ Instructeur : {instructor}
üìÖ Jours de cours : {schedule}

Pour toute question, n'h√©sitez pas √† contacter votre instructeur ou l'administration.
Bon apprentissage ! üåü`
        },
      ]);

      console.log("‚úÖ Templates de messages cr√©√©s avec succ√®s!");
    }

    // V√©rifier si des automatisations existent d√©j√†
    const existingAutomations = await db.select().from(automationRules);
    if (existingAutomations.length > 0) {
      console.log(`${existingAutomations.length} r√®gles d'automatisation existent d√©j√†.`);
    } else {
      // R√©cup√©rer l'ID du template de rappel de cours
      const [reminderTemplate] = await db.select()
        .from(templateMessages)
        .where(eq(templateMessages.name, "Rappel de cours quotidien"));
      
      const [welcomeTemplate] = await db.select()
        .from(templateMessages)
        .where(eq(templateMessages.name, "Message de bienvenue"));
        
      const [badgeTemplate] = await db.select()
        .from(templateMessages)
        .where(eq(templateMessages.name, "Attribution de badge"));

      // Cr√©er les r√®gles d'automatisation pr√©d√©finies
      await db.insert(automationRules).values([
        {
          name: "Envoi matinal des cours du jour",
          description: "Envoie automatiquement un message √† 6h GMT chaque jour pour les cours du jour dans les groupes Telegram",
          triggerType: "cron-schedule",
          triggerData: "0 6 * * *", // Tous les jours √† 6h GMT
          actionType: "send-telegram",
          actionData: reminderTemplate ? reminderTemplate.id.toString() : "1",
          isActive: true
        },
        {
          name: "Cr√©ation automatique des r√©unions Zoom",
          description: "Cr√©e automatiquement des r√©unions Zoom pour les sessions √† venir",
          triggerType: "session-before",
          triggerData: "86400", // 24 heures avant (en secondes)
          actionType: "create-zoom",
          actionData: "topic={course}, duration=60, timezone=GMT",
          isActive: true
        },
        {
          name: "Message de bienvenue aux nouveaux √©tudiants",
          description: "Envoie un message de bienvenue aux nouveaux √©tudiants inscrits √† un cours",
          triggerType: "new-user",
          triggerData: "role=student",
          actionType: "send-telegram",
          actionData: welcomeTemplate ? welcomeTemplate.id.toString() : "4",
          isActive: true
        },
        {
          name: "Rappel 15 minutes avant le cours",
          description: "Envoie un rappel 15 minutes avant le d√©but d'un cours",
          triggerType: "session-before",
          triggerData: "900", // 15 minutes avant (en secondes)
          actionType: "send-telegram",
          actionData: reminderTemplate ? reminderTemplate.id.toString() : "1",
          isActive: true
        },
        {
          name: "Notification de badge attribu√©",
          description: "Envoie une notification quand un badge est attribu√© √† un utilisateur",
          triggerType: "badge-awarded",
          triggerData: "any",
          actionType: "send-telegram",
          actionData: badgeTemplate ? badgeTemplate.id.toString() : "3",
          isActive: true
        },
      ]);

      console.log("‚úÖ R√®gles d'automatisation cr√©√©es avec succ√®s!");
    }

    console.log("Op√©ration termin√©e avec succ√®s!");
    process.exit(0);
  } catch (error) {
    console.error("‚ùå Erreur lors de la cr√©ation des automatisations:", error);
    process.exit(1);
  }
}

// Ex√©cuter la fonction principale
createAutomations();